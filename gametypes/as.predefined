// https://github.com/sashi0034/angel-lsp
// https://github.com/TeamForbiddenLLC/warfork-qfusion
// https://warforkwiki.com/index.php?title=Gametype_Scripting#Game_Types

class String {
	String ();
	String (const String &in);
	String (int);
	String (float);
	String (double);
	String &opAssign(const String &in);
	String &opAssign(int);
	String &opAssign(double);
	String &opAssign(float);
	uint8 &opIndex(uint);
	const uint8 &opIndex(uint) const;
	String &opAddAssign(const String &in);
	String &opAddAssign(int);
	String &opAddAssign(double);
	String &opAddAssign(float);
	String @opAdd(const String &in) const;
	String @opAdd(int) const;
	String @opAdd_r(int) const;
	String @opAdd(double) const;
	String @opAdd_r(double) const;
	String @opAdd(float) const;
	String @opAdd_r(float) const;
	bool opEquals(const String &in) const;
	uint len() const;
	uint length() const;
	bool empty() const;
	String @tolower() const;
	String @toupper() const;
	String @trim() const;
	String @removeColorTokens() const;
	String @getToken(const uint) const;
	int toInt() const;
	float toFloat() const;
	uint locate(const String &in, const uint) const;
	String @substr(const uint start, const uint length) const;
	String @subString(const uint start, const uint length) const;
	String @substr(const uint start) const;
	String @subString(const uint start) const;
	String @replace(const String &in search, const String &in replace) const;
	bool isAlpha() const;
	bool isNumerical() const;
	bool isNumeric() const;
	bool isAlphaNumerical() const;
}

funcdef bool less(const ?&in a, const ?&in b);

class array<T>{
	uint length() const;
	void resize(uint);
	void reverse();
	void insertAt(uint index, const T& in value);
	void insertAt(uint index, const array<T>& arr);
	void insertLast(const T& in);
	void removeAt(uint index);
	void removeLast();
	void removeRange(uint start, uint count);
	void sortAsc();
	void sortAsc(uint startAt, uint count);
	void sortDesc();
	void sortDesc(uint startAt, uint count);
	void sort(const less &in compareFunc, uint startAt = 0, uint count = uint(-1));
	int find(const T& in);
	int find(uint startAt, const T& in);
	int findByRef(const T& in);
	int findByRef(uint startAt, const T& in);
}

class Dictionary{
	void set(const String &in key, ? &in value);
	void set(const String &in key, int64 &in value);
	void set(const String &in key, double &in value);
	bool get(const String &in key, ? &out value) const;
	bool get(const String &in key, int64 &out value) const;
	bool get(const String &in key, double &out value) const;
	array<String> @getKeys() const;
	bool exists(const String &in key) const;
	bool delete(const String &in key);
	void deleteAll();
	bool isEmpty() const;
	uint getSize() const;
}

class Match {
	void launchState (int state) const;
	void startAutorecord () const;
	void stopAutorecord () const;
	bool scoreLimitHit () const;
	bool timeLimitHit () const;
	bool isTied () const;
	bool checkExtendPlayTime () const;
	bool suddenDeathFinished () const;
	bool isPaused () const;
	bool isWaiting () const;
	bool isExtended () const;
	uint duration () const;
	uint startTime () const;
	uint endTime () const;
	int getState () const;
	const String@ get_name() const;
	const String@ getScore() const;
	void set_name ( const String &in );
	void setScore ( const String &in );
	void setClockOverride ( uint milliseconds );
}

class Client {

}

class Entity {
	String name;
	void launchState(int state) const;
	void startAutorecord() const;
	void stopAutorecord() const;
	bool scoreLimitHit() const;
	bool timeLimitHit() const;
	bool isTied() const;
	bool checkExtendPlayTime() const;
	bool suddenDeathFinished() const;
	bool isPaused() const;
	bool isWaiting() const;
	bool isExtended() const;
	uint duration() const;
	uint startTime() const;
	uint endTime() const;
	int getState() const;
	const String@ get_name() const;
	const String@ getScore() const;
	void set_name(const String &in);
	void setScore(const String &in);
	void setClockOverride(uint milliseconds);
}

class Team {

}

class Bot {

}

class Item {
	const int tag;
	const uint type;
	const int flags;
	const int quantity;
	const int inventoryMax;
	const int ammoTag;
	const int weakAmmoTag;
	const String @ get_classname () const;
	const String @ get_name () const;
	const String @ get_shortName () const;
	const String @ get_model () const;
	const String @ get_model2 () const;
	const String @ get_icon () const;
	const String @ get_simpleIcon () const;
	const String @ get_pickupSound () const;
	const String @ get_colorToken () const;
	bool isPickable () const;
	bool isUsable () const;
	bool isDropable () const;
}

class Cvar {
	Cvar(const String&in name, const String&in, const uint cvarflags);
	Cvar(const Cvar&in);
	void reset();
	void set(const String&in);
	void set(float);
	void set(int);
	void set(double);
	void set_modified(bool);
	bool get_modified() const;
	bool get_boolean() const;
	int get_integer() const;
	float get_value() const;
	const String@ get_name() const;
	const String@ get_string() const;
	const String@ get_defaultString() const;
	const String@ get_latchedString() const;
};

enum eCvarFlag {
	CVAR_ARCHIVE = 0x1,      // set to cause it to be saved to vars.rc
	CVAR_USERINFO = 0x2,     // added to userinfo  when changed
	CVAR_SERVERINFO = 0x4,   // added to serverinfo when changed
	CVAR_NOSET = 0x8,        // don't allow change from console at all
	CVAR_LATCH = 0x10,       // but can be set from the command line
	CVAR_LATCH_VIDEO = 0x20, // save changes until map restart
	CVAR_LATCH_SOUND = 0x40, // save changes until video restart
	CVAR_CHEAT = 0x80,       // will be reset to default unless cheats
	CVAR_READONLY = 0x100   // don't allow changing by user, ever
};

class GametypeDesc {
	String title;
	String version;
	String author;
	String name;
    uint spawnableItemsMask;
    uint respawnableItemsMask;
    uint dropableItemsMask;
    uint pickableItemsMask;
    bool isTeamBased;
    bool isRace;
    bool isTutorial;
    bool inverseScore;
    bool hasChallengersQueue;
    bool hasChallengersRoulette;
    int maxPlayersPerTeam;
    int ammoRespawn;
    int armorRespawn;
    int weaponRespawn;
    int healthRespawn;
    int powerupRespawn;
    int megahealthRespawn;
    int ultrahealthRespawn;
    bool readyAnnouncementEnabled;
    bool scoreAnnouncementEnabled;
    bool countdownEnabled;
    bool mathAbortDisabled;
    bool matchAbortDisabled;
    bool shootingDisabled;
    bool infiniteAmmo;
    bool canForceModels;
    bool canShowMinimap;
    bool teamOnlyMinimap;
    int spawnpointRadius;
    bool customDeadBodyCam;
    bool removeInactivePlayers;
    bool mmCompatible;
    uint numBots;
    bool dummyBots;
    uint forceTeamHumans;
    uint forceTeamBots;
    bool disableObituaries;
	String@ get_name() const;
	String@ get_title() const;
	void set_title(const String&in);
	const String@ get_version() const;
	void set_version(const String&in);
	const String@ get_author() const;
	void set_author(const String&in);
	const String@ get_manifest() const;
	void setTeamSpawnsystem(int team, int spawnsystem, int wave_time, int wave_maxcount, bool deadcam);
	bool get_isInstagib() const;
	bool get_useSteamAuth() const;
	bool get_hasFallDamage() const;
	bool get_hasSelfDamage() const;
	bool get_isInvidualGameType() const;
}

class Vec3 {
	float x;
	float y;
	float z;
	Vec3();
	Vec3(float x, float y, float z);
	Vec3(float v);
	Vec3(const Vec3 &in);
	Vec3 &opAssign(Vec3 &in);
	Vec3 &opAssign(int);
	Vec3 &opAssign(float);
	Vec3 &opAddAssign(Vec3 &in);
	Vec3 &opSubAssign(Vec3 &in);
	Vec3 &opMulAssign(Vec3 &in);
	Vec3 &opXorAssign(Vec3 &in);
	Vec3 &opMulAssign(int);
	Vec3 &opMulAssign(float);
	Vec3 opAdd(Vec3 &in) const;
	Vec3 opSub(Vec3 &in) const;
	float opMul(Vec3 &in) const;
	Vec3 opMul(float) const;
	Vec3 opMul_r(float) const;
	Vec3 opMul(int) const;
	Vec3 opMul_r(int) const;
	Vec3 opXor(const Vec3 &in) const;
	bool opEquals(const Vec3 &in) const;
	void set(float x, float y, float z);
	float length() const;
	float normalize() const;
	float distance(const Vec3 &in) const;
	void angleVectors(Vec3 &out, Vec3 &out, Vec3 &out) const;
	Vec3 toAngles() const;
	Vec3 perpendicular() const;
	void makeNormalVectors(Vec3 &out, Vec3 &out) const;
}

namespace StringUtils {
	String @FormatInt(int64 val, const String &in options, uint width = 0);
	String @FormatFloat(double val, const String &in options, uint width = 0, uint precision = 0);
	String @Format(const String &in format, const String &in arg1);
	String @Format(const String &in format, const String &in arg1, const String &in arg2);
	String @Format(const String &in format, const String &in arg1, const String &in arg2, const String &in arg3);
	String @Format(const String &in format, const String &in arg1, const String &in arg2, const String &in arg3, const String &in arg4);
	String @Format(const String &in format, const String &in arg1, const String &in arg2, const String &in arg3, const String &in arg4, const String &in arg5);
	String @Format(const String &in format, const String &in arg1, const String &in arg2, const String &in arg3, const String &in arg4, const String &in arg5, const String &in arg6);
	String @Format(const String &in format, const String &in arg1, const String &in arg2, const String &in arg3, const String &in arg4, const String &in arg5, const String &in arg6, const String &in arg7);
	String @Format(const String &in format, const String &in arg1, const String &in arg2, const String &in arg3, const String &in arg4, const String &in arg5, const String &in arg6, const String &in arg7, const String &in arg8);
	array<String @> @Split(const String &in string, const String &in delimiter);
	String @Join(array<String @> &in, const String &in delimiter);
	uint Strtol(const String &in string, uint base);
	String @FromCharCode(uint charCode);
	String @FromCharCode(array<uint> &in charCodes);
}

Entity @G_SpawnEntity( const String &in );
const String @G_SpawnTempValue( const String &in );
Entity @G_GetEntity( int entNum );
Client @G_GetClient( int clientNum );
Team @G_GetTeam( int team );
Item @G_GetItem( int tag );
Item @G_GetItemByName( const String &in name );
Item @G_GetItemByClassname( const String &in name );
array<Entity @> @G_FindInRadius( const Vec3 &in, float radius );
array<Entity @> @G_FindByClassname( const String &in );
void G_ResetLevel();
void G_RemoveDeadBodies();
void G_Items_RespawnByType( uint typeMask, int item_tag, float delay );
void G_PrintMsg( Entity @, const String &in );
void G_CenterPrintMsg( Entity @, const String &in );
void G_CenterPrintFormatMsg( Entity @, const String &in, const String &in );
void G_CenterPrintFormatMsg( Entity @, const String &in, const String &in, const String &in );
void G_CenterPrintFormatMsg( Entity @, const String &in, const String &in, const String &in, const String &in );
void G_CenterPrintFormatMsg( Entity @, const String &in, const String &in, const String &in, const String &in, const String &in );
void G_CenterPrintFormatMsg( Entity @, const String &in, const String &in, const String &in, const String &in, const String &in, const String &in );
void G_CenterPrintFormatMsg( Entity @, const String &in, const String &in, const String &in, const String &in, const String &in, const String &in, const String &in );
void G_CenterPrintFormatMsg( Entity @, const String &in, const String &in, const String &in, const String &in, const String &in, const String &in, const String &in, const String &in );
void G_Sound( Entity @, int channel, int soundindex, float attenuation );
void G_PositionedSound( const Vec3 &in, int channel, int soundindex, float attenuation );
void G_GlobalSound( int channel, int soundindex );
void G_LocalSound( Client @, int channel, int soundIndex );
void G_AnnouncerSound( Client @, int soundIndex, int team, bool queued, Client @ );
int G_DirToByte( const Vec3 &in origin );
int G_PointContents( const Vec3 &in origin );
bool G_InPVS( const Vec3 &in origin1, const Vec3 &in origin2 );
bool G_WriteFile( const String &, const String & );
bool G_AppendToFile( const String &, const String & );
const String @G_LoadFile( const String & );
int G_FileLength( const String & );
void G_CmdExecute( const String & );
const String @G_LocationName( const Vec3 &in origin );
int G_LocationTag( const String & );
const String @G_LocationName( int tag );
void __G_CallTouch( Entity @ent, Entity @other, const Vec3 planeNormal, int surfFlags );
void __G_CallUse( Entity @ent, Entity @other, Entity @activator );
void __G_CallStop( Entity @ent );
void __G_CallPain( Entity @ent, Entity @other, float kick, float damage );
void __G_CallDie( Entity @ent, Entity @inflicter, Entity @attacker );
int G_SkinIndex( const String &in );
int G_ModelIndex( const String &in );
int G_SoundIndex( const String &in );
int G_ModelIndex( const String &in, bool pure );
int G_SoundIndex( const String &in, bool pure );
void G_PureFile( const String &in );
void G_RegisterCommand( const String &in );
void G_RegisterCallvote( const String &in, const String &in, const String &in, const String &in );
void G_ConfigString( int index, const String &in );
Entity @G_FireWeakBolt( const Vec3 &in origin, const Vec3 &in angles, int speed, int damage, int knockback, int stun, Entity @owner );
void G_FireStrongBolt( const Vec3 &in origin, const Vec3 &in angles, int range, int damage, int knockback, int stun, Entity @owner );
Entity @G_FirePlasma( const Vec3 &in origin, const Vec3 &in angles, int speed, int radius, int damage, int knockback, int stun, Entity @owner );
Entity @G_FireRocket( const Vec3 &in origin, const Vec3 &in angles, int speed, int radius, int damage, int knockback, int stun, Entity @owner );
Entity @G_FireGrenade( const Vec3 &in origin, const Vec3 &in angles, int speed, int radius, int damage, int knockback, int stun, Entity @owner );
void G_FireRiotgun( const Vec3 &in origin, const Vec3 &in angles, int range, int spread, int count, int damage, int knockback, int stun, Entity @owner );
void G_FireBullet( const Vec3 &in origin, const Vec3 &in angles, int range, int spread, int damage, int knockback, int stun, Entity @owner );
Entity @G_FireBlast( const Vec3 &in origin, const Vec3 &in angles, int speed, int radius, int damage, int knockback, int stun, Entity @owner );
const String @ML_GetMapByNum( int num );
int G_GetDefaultColorCorrection();

int abs( int x );
double abs( double x );
double log( double x );
double pow( double x, double y );
double cos( double x );
double sin( double x );
double tan( double x );
double acos( double x );
double asin( double x );
double atan( double x );
double atan2( double x, double y );
double sqrt( double x );
double ceil( double x );
double floor( double x );
double random();
double brandom( double min, double max );
int rand();

const uint MATCH_STATE_NONE;
const uint MATCH_STATE_WARMUP;
const uint MATCH_STATE_COUNTDOWN;
const uint MATCH_STATE_PLAYTIME;
const uint MATCH_STATE_POSTMATCH;
const uint MATCH_STATE_WAITEXIT;
const uint MATCH_STATE_TOTA;

const uint TEAM_SPECTATOR;
const uint TEAM_PLAYERS;
const uint TEAM_ALPHA;
const uint TEAM_BETA;
const uint GS_MAX_TEAMS;

const uint SPAWNSYSTEM_INSTANT;
const uint SPAWNSYSTEM_WAVES;
const uint SPAWNSYSTEM_HOLD;
const uint SPAWNSYSTEM_TOTA;

const uint levelTime;
const uint frameTime;
const uint realTime;
const uint64 localTime;
const int maxEntities;
const int numEntities;
const int maxClients;

GametypeDesc gametype;
Match match;

String formatInt(int64 val, const String &in options = "", uint width = 0);
String formatUInt(uint64 val, const String &in options = "", uint width = 0);
String formatFloat(double val, const String &in options = "", uint width = 0, uint precision = 0);
int64 parseInt(const String &in, uint base = 10, uint &out byteCount = 0);
uint64 parseUInt(const String &in, uint base = 10, uint &out byteCount = 0);
double parseFloat(const String &in, uint &out byteCount = 0);