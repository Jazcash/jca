// https://github.com/sashi0034/angel-lsp
// https://github.com/TeamForbiddenLLC/warfork-qfusion
// https://warforkwiki.com/index.php?title=Gametype_Scripting#Game_Types

[BuiltinString]
class String {
    bool opEquals(const String& in other) const;
    String(const String&in);
}

funcdef bool less(const ?&in a, const ?&in b);

class array<T>{
	uint length() const;
	void resize(uint);
	void reverse();
	void insertAt(uint index, const T& in value);
	void insertAt(uint index, const array<T>& arr);
	void insertLast(const T& in);
	void removeAt(uint index);
	void removeLast();
	void removeRange(uint start, uint count);
	void sortAsc();
	void sortAsc(uint startAt, uint count);
	void sortDesc();
	void sortDesc(uint startAt, uint count);
	void sort(const less &in compareFunc, uint startAt = 0, uint count = uint(-1));
	int find(const T& in);
	int find(uint startAt, const T& in);
	int findByRef(const T& in);
	int findByRef(uint startAt, const T& in);
}

class Dictionary{
	//Sets a key/value pair in the dictionary. If the key already exists, the value will be changed.
	void set(const String &in key, ? &in value);
	void set(const String &in key, int64 &in value);
	void set(const String &in key, double &in value);
	//Retrieves the value corresponding to the key. The methods return false if the key is not found, and in this case the value will maintain its default value based on the type.
	bool get(const String &in key, ? &out value) const;
	bool get(const String &in key, int64 &out value) const;
	bool get(const String &in key, double &out value) const;
	//This method returns an array with all of the existing keys in the dictionary. The order of the keys in the array is undefined.
	array<String> @getKeys() const;
	//Returns true if the key exists in the dictionary.
	bool exists(const String &in key) const;
	//Removes the key and the corresponding value from the dictionary. Returns false if the key wasn't found.
	bool delete(const String &in key);
	//Removes all entries in the dictionary.
	void deleteAll();
	//Returns true if the dictionary doesn't hold any entries.
	bool isEmpty() const;
	//Returns the number of keys in the dictionary.
	uint getSize() const;
}

class Client {

}

class Entity {

}

class Team {

}

class Bot {

}

// CvarAddon.predefined

// Flags for CVars (examples)
const int CVAR_NONE         = 0;     // No special properties
const int CVAR_READONLY     = 1;     // Read-only variable
const int CVAR_ARCHIVE      = 2;     // Persistent across sessions
const int CVAR_SERVER       = 4;     // Synchronized across the server

class Cvar {
	Cvar(const String&in name, const String&in, const uint cvarflags);
	Cvar(const Cvar&in);

	void reset();
	void set(const String&in);
	void set(float);
	void set(int);
	void set(double);
	void set_modified(bool);
	bool get_modified() const;
	bool get_boolean() const;
	int get_integer() const;
	float get_value() const;
	const String@ get_name() const;
	const String@ get_string() const;
	const String@ get_defaultString() const;
	const String@ get_latchedString() const;
};

enum eCvarFlag {
	CVAR_ARCHIVE = 0x1,      // set to cause it to be saved to vars.rc
	CVAR_USERINFO = 0x2,     // added to userinfo  when changed
	CVAR_SERVERINFO = 0x4,   // added to serverinfo when changed
	CVAR_NOSET = 0x8,        // don't allow change from console at all
	CVAR_LATCH = 0x10,       // but can be set from the command line
	CVAR_LATCH_VIDEO = 0x20, // save changes until map restart
	CVAR_LATCH_SOUND = 0x40, // save changes until video restart
	CVAR_CHEAT = 0x80,       // will be reset to default unless cheats
	CVAR_READONLY = 0x100   // don't allow changing by user, ever
};

class Gametype {
    uint spawnableItemsMask;
    uint respawnableItemsMask;
    uint dropableItemsMask;
    uint pickableItemsMask;
    bool isTeamBased;
    bool isRace;
    bool isTutorial;
    bool inverseScore;
    bool hasChallengersQueue;
    bool hasChallengersRoulette;
    int maxPlayersPerTeam;
    int ammoRespawn;
    int armorRespawn;
    int weaponRespawn;
    int healthRespawn;
    int powerupRespawn;
    int megahealthRespawn;
    int ultrahealthRespawn;
    bool readyAnnouncementEnabled;
    bool scoreAnnouncementEnabled;
    bool countdownEnabled;
    bool mathAbortDisabled;
    bool matchAbortDisabled;
    bool shootingDisabled;
    bool infiniteAmmo;
    bool canForceModels;
    bool canShowMinimap;
    bool teamOnlyMinimap;
    int spawnpointRadius;
    bool customDeadBodyCam;
    bool removeInactivePlayers;
    bool mmCompatible;
    uint numBots;
    bool dummyBots;
    uint forceTeamHumans;
    uint forceTeamBots;
    bool disableObituaries;
}

Gametype gametype;